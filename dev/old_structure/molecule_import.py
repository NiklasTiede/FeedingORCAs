# This module contains functions to create and store lists of molecules. Molecules can be instantiated by
# their SMILES-string or a connection table (.sdf-file, which have to be generated by RDKit). The functions
# use the 'file_import'-folder as starting point, so you should add your .smi/.sdf files to that folder.
# Pickle is used to store and load the molecule lists (within the 'pickle_storage'-folder)

import os
import pickle
from pprint import pprint

from rdkit import Chem
from rdkit.Chem import AllChem

from .molecule_classes_and_functions import Atom, Molecule, MoleculeList


def smiles_file_to_smiles_list(smiles_file):
    """ Reads SMILES strings from a file and converts them into a list of SMILES
    strings. The file has to be placed in the 'file_import'-folder. """
    # print(os.path.dirname(__file__))  # todo here
    if 'file_import' not in os.getcwd():
        os.chdir('../file_import')
    with open(f"{smiles_file}", 'r') as read_file:
        smiles_list = read_file.read().splitlines()
        print(f"{len(smiles_list)} SMILES strings were identified.")
    return smiles_list


def smiles_list_to_molblock_list(smiles_list):
    """ A list of SMILES-strings are converted to a list of molblocks. RDKit's default
    ETKDG-method is used for the generation of the cartesian coordinates. """
    smiles_molblock_list = []
    for string in smiles_list:
        molecule = Chem.MolFromSmiles(string)
        molecule = Chem.AddHs(molecule)
        AllChem.EmbedMolecule(molecule, randomSeed=0xf00d)
        molblock = Chem.MolToMolBlock(molecule)
        # a list of tuples are created which contain the smiles string and its molblock:
        smiles_and_molblock = (string, molblock)
        smiles_molblock_list.append(smiles_and_molblock)
    return smiles_molblock_list


def molblock_list_to_molecule_list(smiles_molblock_list):
    """ Each line of the molblock is converted into a list of non-space characters. All lines with
    a length of 16 characters are read as atom block, all lines with a length of 4 are read as bond block.
    Each atom-block line's information (cartesian coordinates, element-type and stereo information) is
    packed into a newly instantiated Atom-object. The atoms are connected using the information of the
    bond block. All atoms are packed into a Molecule-object.

    Arguments:
        - molblock_list ('list'):  a list containing a string for each molecule

    Returns:
        - molecule_list ('list'):  a list containing Molecule-objects  (example: [m(14):C8H12O3N, ... ] )
    """
    #molecule_list = []
    molecule_list = MoleculeList()

    # Each molblock of the molblock_list is converted into list of lines, whitespaces are removed:
    for smiles, molblock in smiles_molblock_list:
        splitted_molblock = molblock.split('\n')
        molecule_list.append(Molecule())
        molecule_list[-1].smiles = smiles
        atom_enumerator = 0
        for line in splitted_molblock:
            line_list = line.split()

            # # Uncomment to check if line-length is correct for extraction:
            print(line_list, len(line_list))

            # Atom-block information is extracted (stereoatom_info represents an atoms charge):
            if len(line_list) == 16:
                atom_enumerator += 1
                charge, radical = 0, False
                x, y, z = float(line_list[0]), float(line_list[1]), float(
                    line_list[2])
                element_symbol, stereoatom_info = line_list[3], int(
                    line_list[6])
                if stereoatom_info == 3:  # positive charge
                    charge += 1
                if stereoatom_info == 4:  # radical
                    radical = True
                if stereoatom_info == 5:  # negative charge
                    charge -= 1
                new_atom = Atom(element_symbol=element_symbol,
                                x=x,
                                y=y,
                                z=z,
                                total_index=atom_enumerator,
                                charge=charge,
                                radical=radical)
                molecule_list[-1].add_atom(new_atom)

            # Bond-block information is extracted (stereobond_info contains an atoms chiral information):
            if len(line_list) == 4 and line_list[0] is not 'M':
                atom1_index, atom2_index, bond_order_num, stereobond_info = int(line_list[0]), int(line_list[1]),\
                                                                            int(line_list[2]), int(line_list[3])
                atom1_instance = molecule_list[-1].get_contained_atoms()[
                    atom1_index - 1]
                atom2_instance = molecule_list[-1].get_contained_atoms()[
                    atom2_index - 1]
                bond_order = ['s', 'd', 't', 'a'][bond_order_num - 1]
                molecule_list[-1].add_bond(atom1_instance, atom2_instance,
                                           bond_order)
                if stereobond_info == 1:
                    atom1_instance.stereochem = 'S'  # CIP rule
                if stereobond_info == 6:
                    atom1_instance.stereochem = 'R'
    return molecule_list


def store_molecule_list_as_pickle(molecule_list, pickle_name):
    """ Stores the molecule list as pickle object. """
    if 'pickle_storage' not in os.getcwd():
        os.chdir('../pickle_storage')
    with open(f'{pickle_name}', 'wb') as molecule_file:
        pickle.dump(molecule_list, molecule_file)


def load_molecule_list_from_pickle(pickle_file):
    """ Loads the list of molecules from it's pickled file. """
    if 'pickle_storage' not in os.getcwd():
        os.chdir('../pickle_storage')
    with open(f'{pickle_file}', 'rb') as molecule_file:
        molecule_list = pickle.load(molecule_file)
    return molecule_list


def instantiate_and_store_molecule_list_from_smiles_file(
        smiles_file, pickle_name='stored_molecule_list'):
    """ A file containing one or more SMILES strings is converted into a list of Molecule-instances and stored
    as bytestream (pickle-file). RDKit's default ETKDG-method is used to generate the molecules cartesian coordinates.

    data flow:  smiles_file -> smiles_list -> molblock_list -> molecule_list -> pickle_file
    """
    smiles_list = smiles_file_to_smiles_list(smiles_file)
    molblock_list = smiles_list_to_molblock_list(smiles_list)
    molecule_list = molblock_list_to_molecule_list(molblock_list)
    store_molecule_list_as_pickle(molecule_list, pickle_name)


def main():
    """ Testing the functions. """

    # A python list full of SMILES-strings is generated:
    smiles_file = '../file_import/150_smiles-strings_example.smi'
    # smiles_file = '../file_import/6_smiles.smi'
    smiles_list = smiles_file_to_smiles_list(smiles_file)
    print('List containing canonical SMILES strings:', smiles_list)

    # The smiles list is converted into a molblock list. Cartesian coordinates are generated by RDKit's EKTDG-method:
    molblock_list = smiles_list_to_molblock_list(smiles_list)
    print('\nRDKit helped to generate these Molblocks:', molblock_list)

    # A list of molecules is instantiated by extraction of all information from the molblocks:
    molecule_list = molblock_list_to_molecule_list(molblock_list)
    print(
        '\nInformation was extracted and a list of molecule-objects instantiated:',
        molecule_list)

    # Thus generated list if stored as pickle-bytestream in the 'pickle_storage'-folder:
    mol_lst_nameA = 'stored_molecule_list_A'
    store_molecule_list_as_pickle(molecule_list=molecule_list,
                                  pickle_name=mol_lst_nameA)
    if mol_lst_nameA in os.listdir():
        answer = True
    else:
        answer = False
    print(
        f"\nThe function 'store_molecule_list_as_pickle()' generated a pickle-file: {answer}"
    )

    # Combining all the above functions let's you convert the smiles_file into a pickled molecule list:
    mol_lst_nameB = 'stored_molecule_list_B'
    instantiate_and_store_molecule_list_from_smiles_file(
        smiles_file, pickle_name=mol_lst_nameB)
    if mol_lst_nameB in os.listdir():
        answer = True
    else:
        answer = False
    print(
        f"\nThe function 'instantiate_and_store_molecule_list_from_smiles_file()' generated a pickle-file: {answer}"
    )

    # The molecule list can be loaded from the pickle-object:
    molecule_list = load_molecule_list_from_pickle(mol_lst_nameB)
    print('\n', molecule_list)
    all_mol_properties = molecule_list[0].__dict__
    pprint(all_mol_properties, width=300)
    for molecule in molecule_list:
        print(molecule)


if __name__ == '__main__':
    main()
